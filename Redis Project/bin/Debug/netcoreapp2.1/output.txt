Filling With Garbage
Beginning GraphQL Tests

Current Query: 
query {
  deviceByOrgId(orgId: 1) {
    deviceId
    imei
    serial
    make
    model
    orgId
    orgUrn
    costCenterId
    costCenterUrn
    description
  }
}

Uncached execution time (Average of 1000 runs): 18551µs
Cached execution time (Average of 1000 runs): 292µs
63 times faster.

Current Query: 
query {
  deviceById(deviceId: 1) {
    deviceId
    imei
    serial
    make
    model
    orgId
    orgUrn
    costCenterId
    costCenterUrn
    description
  }
}

Uncached execution time (Average of 1000 runs): 17362µs
Cached execution time (Average of 1000 runs): 285µs
60 times faster.

Current Query: 
{
  __schema {
    types {
      name
      kind
    }
  }
}

Uncached execution time (Average of 1000 runs): 9239µs
Cached execution time (Average of 1000 runs): 379µs
24 times faster.


Beginning SQL Tests

Current Query: 
SELECT *
FROM Zach_SnapLogic_Demo
WHERE id < 10;

Uncached execution time (Average of 1000 runs): 6635µs
Cached execution time (Average of 1000 runs): 279µs
23 times faster.

Current Query: 
SELECT *
FROM Zach_SnapLogic_Demo
WHERE id < 1000;

Uncached execution time (Average of 1000 runs): 271131µs
Cached execution time (Average of 1000 runs): 1407µs
192 times faster.

Current Query: 
SELECT *
FROM (SELECT * FROM Zach_SnapLogic_Demo WHERE id < 10) AS Q1, (SELECT * FROM Zach_SnapLogic_Demo WHERE id < 100 AND id >= 10) AS Q2;

Uncached execution time (Average of 1000 runs): 675947µs
Cached execution time (Average of 1000 runs): 1959µs
345 times faster.

